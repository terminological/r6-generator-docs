<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--- DEPS_START -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<r6.version>0.5.2</r6.version>
	</properties>

	<groupId>io.github.terminological</groupId>
	<artifactId>r6-generator-docs</artifactId>
	<version>main-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>R6 Generator Maven Plugin Test</name>

	<dependencies>
		<dependency>
			<groupId>io.github.terminological</groupId>
			<artifactId>r6-generator-runtime</artifactId>
			<version>${r6.version}</version>
		</dependency>
		<!--- DEPS_END -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.4.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.4.0</version>
			<scope>test</scope>
		</dependency>
		<!--- DEPS_START -->
	</dependencies>
	<!--- DEPS_END -->


	<!-- REPOSITORIES_START -->
	<!-- Resolve runtime library on sonatype OSSRH -->
	<!-- not needed if you plan to use a stable r6.version of the r6-generator-runtime 
		and r6-generator-maven-plugin rather than main-SNAPSHOT -->
	<repositories>
		<repository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
	</repositories>

	<!-- Resolve maven plugin on sonatype OSSRH -->
	<pluginRepositories>
		<pluginRepository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</pluginRepository>
	</pluginRepositories>
	<!-- REPOSITORIES_END -->

	<!--- BUILD_START -->
	<build>
		<plugins>
			<!--- BUILD_END -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<!--  generate documentation UML file -->
			<plugin>
				<artifactId>plantuml-generator-maven-plugin</artifactId>
				<groupId>de.elnarion.maven</groupId>
				<!-- https://github.com/devlauer/plantuml-generator for options -->
				<version>1.1.2</version>
				<executions>
					<execution>
						<id>generate-simple-diagram</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-test-sources</phase>
						<configuration>
							<outputDirectory>${project.basedir}/../vignettes</outputDirectory>
							<outputFilename>RTypes.plantuml</outputFilename>
							<removeFields>true</removeFields>
							<removeMethods>true</removeMethods>
<!-- 							<maxVisibilityMethods>PUBLIC</maxVisibilityMethods> -->
							<scanPackages>
								<scanPackage>
									uk.co.terminological.rjava.types
								</scanPackage>
							</scanPackages>
							<blacklistRegexp>.*\$[0-9]+</blacklistRegexp>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!--- BUILD_START -->
			<plugin>
				<groupId>io.github.terminological</groupId>
				<artifactId>r6-generator-maven-plugin</artifactId>
				<version>${r6.version}</version>
				<configuration>
					<packageData>
						<!-- R package metadata: -->
						<title>A test library</title>
						
						<!-- As this project is documenting the r6-generator-maven-plugin I am syncing R package version with the -->
						<!-- r6-generator version. this is unlikely to be what you want to do. -->
						<version>${r6.version}</version>
						 
						<!-- Instead you most likely want to sync the R package version to your Java artifact version in a "normal" project -->
						<!-- <version>${version}</version> -->
						<!-- Alternatively you can manage the R package version manually by putting whatever you like in here -->
						<!-- Although semantic versioning of the format 0.1.0.9000 is expected -->
						<!-- <version>0.1.0.9000</version> -->
						
						<url>https://terminological.github.io/r6-generator-docs/docs/</url>
						<doi>10.5281/zenodo.6645134</doi>
						<packageName>testRapi</packageName>
						<license>MIT</license>
						
						<!-- this is the Description field in the R DESCRIPTION file -->
						<!-- CRAN specifies some standards for this, such as it shoudl not start with the package name and must pass spellchecks -->
						<!-- any references to other packages mut be in single quotes -->
						<description>
							Documents the features of the 'r6-generator-maven-plugin' by providing an example
							of an R package automatically generated from Java code by the plugin. 
							It is not intended to be useful beyond testing,	demonstrating and documenting the features of the plugin.
						</description>
						<maintainerName>Rob</maintainerName>
						<maintainerFamilyName>Challen</maintainerFamilyName>
						<maintainerEmail>rc538@exeter.ac.uk</maintainerEmail>
						<maintainerOrganisation>University of Exeter</maintainerOrganisation>
						
						<!-- Build configuration options: -->
						<debug>false</debug> <!-- starts the R library with java code in debugging mode -->
						<usePkgdown>true</usePkgdown> <!-- Pkgdown will generate a nice looking site -->
						<useRoxygen2>false</useRoxygen2> <!-- Roxygen can integrate user supplied and generated R code, but requires 
							a working R version on the system that generates the R package -->
						<useJavadoc>false</useJavadoc> <!-- building the javadocs into the documentation is nice but can add 
							to the size of the package which is not helpful if submitting to CRAN -->
							
						<!-- pre-compiling the binary if probably a safer option -->
						<!-- the alternative is to fetch all dependencies and compile the java from source on first use of the library -->
						<preCompileBinary>true</preCompileBinary> 
						
						 <!-- packaging all dependencies is the most robust but results in a large package size that may not be accepted on CRAN -->
						 <!-- the alternative is to fetch all dependencies on first library use. -->
						<packageAllDependencies>true</packageAllDependencies>
						
						<!-- any rJava VM start up options can be added here -->
						<rjavaOpts>
							<rjavaOpt>-Xmx256M</rjavaOpt> <!-- this example sets the maximum heap size -->
						</rjavaOpts>
						
					</packageData>
					<!-- the best place to put the R package is in the directory above the java code -->
					<!-- and to have the java code in a `java` subdirectory of a github repo. -->
					<!-- i.e. this file would be `java/pom.xml`. This makes R optimally happy and is the best layout for new projects. -->
					<outputDirectory>${project.basedir}/..</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<id>clean-r-library</id>
						<goals>
							<goal>clean-r-library</goal>
						</goals>
					</execution>
					<execution>
						<id>flatten-pom</id>
						<goals>
							<goal>flatten-pom</goal>
						</goals>
					</execution>
					<execution>
						<id>generate-r-library</id>
						<goals>
							<goal>generate-r-library</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!--- BUILD_END -->
</project>
