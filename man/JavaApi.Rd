% Generated by r6-generator-maven-plugin: do not edit by hand

\name{JavaApi}

\alias{JavaApi}

\title{A Test Library}

\section{Usage}{
	\if{html}{\out{<div class="r">}}
	\preformatted{
 J = testRapi::JavaApi$get(logLevel)
 	}
  \if{html}{\out{</div>}}
}

\arguments{
	\if{html}{\out{<div class="arguments">}}
	\item{logLevel}{optional - the slf4j log level as a string - one of OFF (most specific, no logging), 
	FATAL (most specific, little data), ERROR, WARN, INFO, DEBUG, 
	TRACE (least specific, a lot of data), ALL (least specific, all data)}
	\if{html}{\out{</div>}}
}

\description{
Documents the features of the 'r6-generator-maven-plugin' by providing an example of an R package automatically generated from Java code by the plugin. It is not intended to be useful beyond testing, demonstrating and documenting the features of the plugin.

Version: 0.0.0.9999

Generated: 2022-09-25T23:45:05.881050
}

\author{\email{rc538@exeter.ac.uk}}

\examples{
## -----------------------------------
## Check library dependencies for testRapi
## -----------------------------------
testRapi::JavaApi$installDependencies()

## -----------------------------------
## Construct a testRapi Java API instance
## -----------------------------------

J = testRapi::JavaApi$get()
# or a more verbose configuration
# J = testRapi::JavaApi$get("DEBUG")


## -----------------------------------
## Method `J$FactoryTest$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$FactoryTest$new()
# or alternatively:
testRapi::new()
}

## -----------------------------------
## Method `J$BounceTest$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$BounceTest$new()
# or alternatively:
testRapi::new()
}

## -----------------------------------
## Method `J$Serialiser$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$new()
# or alternatively:
testRapi::new()
}

## -----------------------------------
## Method `J$Serialiser$serialiseDataframe(...)`
## Aliased as `testRapi::serialise_dataframe(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$serialiseDataframe(dataframe, filename)
# or alternatively:
testRapi::serialise_dataframe(dataframe, filename)
}

## -----------------------------------
## Method `J$Serialiser$deserialiseDataframe(...)`
## Aliased as `testRapi::deserialise_dataframe(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$deserialiseDataframe(filename)
# or alternatively:
testRapi::deserialise_dataframe(filename)
}

## -----------------------------------
## Method `J$Serialiser$serialiseList(...)`
## Aliased as `testRapi::serialise_list(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$serialiseList(dataframe, filename)
# or alternatively:
testRapi::serialise_list(dataframe, filename)
}

## -----------------------------------
## Method `J$Serialiser$deserialiseList(...)`
## Aliased as `testRapi::deserialise_list(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$deserialiseList(filename)
# or alternatively:
testRapi::deserialise_list(filename)
}

## -----------------------------------
## Method `J$Serialiser$serialiseNamedList(...)`
## Aliased as `testRapi::serialise_named_list(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$serialiseNamedList(dataframe, filename)
# or alternatively:
testRapi::serialise_named_list(dataframe, filename)
}

## -----------------------------------
## Method `J$Serialiser$deserialiseNamedList(...)`
## Aliased as `testRapi::deserialise_named_list(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$Serialiser$deserialiseNamedList(filename)
# or alternatively:
testRapi::deserialise_named_list(filename)
}

## -----------------------------------
## Method `J$FeatureTest$new(...)`
## -----------------------------------
minExample = J$FeatureTest$new('Hello from Java constructor!')

## -----------------------------------
## Method `J$FeatureTest$demoStatic(...)`
## Aliased as `testRapi::demo_static(...)`
## -----------------------------------
J = JavaApi$get()
J$FeatureTest$demoStatic('Ola, el mundo')
demo_static('Bonjour, le monde')

## -----------------------------------
## Method `J$FeatureTest$diamonds(...)`
## Aliased as `testRapi::diamonds(...)`
## -----------------------------------
dplyr::glimpse( diamonds() )

## -----------------------------------
## Method `J$FeatureTest$collider(...)`
## Aliased as `testRapi::feature_test_collider(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$FeatureTest$collider(message1, message2)
# or alternatively:
testRapi::feature_test_collider(message1, message2)
}

## -----------------------------------
## Method `J$MinimalExample$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$MinimalExample$new()
# or alternatively:
testRapi::new()
}

## -----------------------------------
## Method `J$MoreFeatureTest$new(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$MoreFeatureTest$new(message1, message2)
# or alternatively:
testRapi::new(message1, message2)
}

## -----------------------------------
## Method `J$MoreFeatureTest$create(...)`
## Aliased as `testRapi::create(...)`
## -----------------------------------
J = JavaApi$get()
J$MoreFeatureTest$create('Hello,',' World')

## -----------------------------------
## Method `J$MoreFeatureTest$concat(...)`
## Aliased as `testRapi::concat(...)`
## -----------------------------------
\dontrun{
# no example given - appropriate parameter values must be provided:
J$MoreFeatureTest$concat(message1, message2)
# or alternatively:
testRapi::concat(message1, message2)
}

## -----------------------------------
## Method `J$MoreFeatureTest$collider(...)`
## Aliased as `testRapi::more_feature_test_collider(...)`
## -----------------------------------
library(testthat)
tmp = more_feature_test_collider('should ','work')
expect_equal(tmp,'more feature test: should work')
}

\keyword{java api}

\section{Package initialisation and control}{
	\itemize{
		\item \href{#method-api-installDependencies}{\code{JavaApi$installDependencies()}}
		\item \href{#method-api-rebuildDependencies}{\code{JavaApi$rebuildDependencies()}}
		\item \href{#method-api-versionInformation}{\code{JavaApi$versionInformation()}}
		\item \href{#method-api-get}{\code{J = JavaApi$get(logLevel)}}
		\item \href{#method-api-changeLogLevel}{\code{J$changeLogLevel(logLevel)}}
		\item \href{#method-api-reconfigureLog}{\code{J$reconfigureLog(log4jproperties)}}
		\item \href{#method-api-printMessages}{\code{J$printMessages()}}
	}
}

\section{Package classes and static methods}{
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-FactoryTest-new}{\code{J$FactoryTest$new()}}
	}
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-BounceTest-new}{\code{J$BounceTest$new()}}
	}
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-Serialiser-new}{\code{J$Serialiser$new()}}
		\item \href{#method-Serialiser-serialiseDataframe}{\code{J$Serialiser$serialiseDataframe(dataframe, filename)}}
		\item \href{#method-Serialiser-deserialiseDataframe}{\code{J$Serialiser$deserialiseDataframe(filename)}}
		\item \href{#method-Serialiser-serialiseList}{\code{J$Serialiser$serialiseList(dataframe, filename)}}
		\item \href{#method-Serialiser-deserialiseList}{\code{J$Serialiser$deserialiseList(filename)}}
		\item \href{#method-Serialiser-serialiseNamedList}{\code{J$Serialiser$serialiseNamedList(dataframe, filename)}}
		\item \href{#method-Serialiser-deserialiseNamedList}{\code{J$Serialiser$deserialiseNamedList(filename)}}
	}
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-FeatureTest-new}{\code{J$FeatureTest$new(logMessage)}}
		\item \href{#method-FeatureTest-demoStatic}{\code{J$FeatureTest$demoStatic(message)}}
		\item \href{#method-FeatureTest-diamonds}{\code{J$FeatureTest$diamonds()}}
		\item \href{#method-FeatureTest-collider}{\code{J$FeatureTest$collider(message1, message2)}}
	}
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-MinimalExample-new}{\code{J$MinimalExample$new()}}
	}
	\if{html}{\out{<hr>}}
	\itemize{
		\item \href{#method-MoreFeatureTest-new}{\code{J$MoreFeatureTest$new(message1, message2)}}
		\item \href{#method-MoreFeatureTest-create}{\code{J$MoreFeatureTest$create(message1, message2)}}
		\item \href{#method-MoreFeatureTest-concat}{\code{J$MoreFeatureTest$concat(message1, message2)}}
		\item \href{#method-MoreFeatureTest-collider}{\code{J$MoreFeatureTest$collider(message1, message2)}}
	}
}

\section{Package initialisation and control}{
	\if{html}{\out{<a id="method-api-installDependencies"></a>}}
	\subsection{Package method \code{JavaApi$installDependencies()}}{
		This package level method checks for, and installs any dependencies needed for the running of the package.
		It is called automatically on first package load and so in general does not need to be used directly.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
testRapi::JavaApi$installDependencies()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. called for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-rebuildDependencies"></a>}}
	\subsection{Package method \code{JavaApi$rebuildDependencies()}}{
		This package level method removes existing dependencies and re-installs dependencies needed for the running of the package.
		It is called automatically on first package load and so in general does not need to be called.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
testRapi::JavaApi$rebuildDependencies()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. called for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-versionInformation"></a>}}
	\subsection{Package method \code{JavaApi$versionInformation()}}{
		This package level method returns debugging version information for the package
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
testRapi::JavaApi$versionInformation()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
A list containing a set of versioning information about this package.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-get"></a>}}
	\subsection{Package method \code{JavaApi$get()}}{
		This is the main entry point for the package and the root of the Java API in this package. All classes defined in the package
		are made available as items under this root. The JavaApi object manages the communication between R and Java.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
# package classes and functions are nested under the `J` api object.
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logLevel}{ The desired verbosity of the package. One of "OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL".}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
A R6 testRapi::JavaApi object containing the access point to the objects and functions defined in this package 
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-changeLogLevel"></a>}}
	\subsection{Api method \code{J$changeLogLevel(logLevel)}}{
		Once the package is initialised the log level can be changed to increase the level of messages from the api.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$changeLogLevel("DEBUG")
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logLevel}{ The desired verbosity of the package. One of "OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL".}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-reconfigreLog"></a>}}
	\subsection{Api method \code{J$reconfigureLog(log4jproperties)}}{
		Experimental / Advanced use: Once the package is initialised the log configureation can be changed to log to 
		an external file for example.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
prp = fs::path(getwd(),"log4j.properties")
if (fs::file_exists(prp)) {
	J$changeLogLevel(prp)
}
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{log4jproperties}{ a full path to a log4jproperies file}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-api-printMessages"></a>}}
	\subsection{Api method \code{J$printMessages()}}{
		Experimental / Internal use: Messages from Java to R are queued and
		printed after each function call. It is unlikely that any will be not printed
		so in normal circumstances this function should do nothing.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$printMessages()
			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
nothing. used for side effects.
		}
	}
	
}


\section{Static methods and constructors}{
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-FactoryTest-new"></a>}}
	
	\subsection{Method \code{FactoryTest$new()}}{
		the default no-args constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FactoryTest$new()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 FactoryTest object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-BounceTest-new"></a>}}
	
	\subsection{Method \code{BounceTest$new()}}{
		the default no-args constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$BounceTest$new()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 BounceTest object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-new"></a>}}
	
	\subsection{Method \code{Serialiser$new()}}{
		the default no-args constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$new()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 Serialiser object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-serialiseDataframe"></a>}}
	
	\subsection{Method \code{Serialiser$serialiseDataframe()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$serialiseDataframe(dataframe, filename)
# this method is also exposed as a package function:
testRapi::serialise_dataframe(dataframe, filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{dataframe}{ - (java expects a RDataframe)}
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-deserialiseDataframe"></a>}}
	
	\subsection{Method \code{Serialiser$deserialiseDataframe()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$deserialiseDataframe(filename)
# this method is also exposed as a package function:
testRapi::deserialise_dataframe(filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RDataframe: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-serialiseList"></a>}}
	
	\subsection{Method \code{Serialiser$serialiseList()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$serialiseList(dataframe, filename)
# this method is also exposed as a package function:
testRapi::serialise_list(dataframe, filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{dataframe}{ - (java expects a RList)}
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-deserialiseList"></a>}}
	
	\subsection{Method \code{Serialiser$deserialiseList()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$deserialiseList(filename)
# this method is also exposed as a package function:
testRapi::deserialise_list(filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RList: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-serialiseNamedList"></a>}}
	
	\subsection{Method \code{Serialiser$serialiseNamedList()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$serialiseNamedList(dataframe, filename)
# this method is also exposed as a package function:
testRapi::serialise_named_list(dataframe, filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{dataframe}{ - (java expects a RNamedList)}
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-Serialiser-deserialiseNamedList"></a>}}
	
	\subsection{Method \code{Serialiser$deserialiseNamedList()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$Serialiser$deserialiseNamedList(filename)
# this method is also exposed as a package function:
testRapi::deserialise_named_list(filename)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{filename}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RNamedList: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-FeatureTest-new"></a>}}
	
	\subsection{Method \code{FeatureTest$new()}}{
		A maximum of one constructor of any signature can be used. 


If different constructors are needed then they may be used but not 
included in the R Api (i.e. not annotated with @RMethod.) 


Static factory methods can be used instead.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$new(logMessage)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{logMessage - a message which will be logged}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 FeatureTest object: 
		}
	}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
minExample = J$FeatureTest$new('Hello from Java constructor!')
			}
			\if{html}{\out{</div>}}
		}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-FeatureTest-demoStatic"></a>}}
	
	\subsection{Method \code{FeatureTest$demoStatic()}}{
		Static methods are also supported. 

These are accessed through the
root of the R api, and as a functional interface
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$demoStatic(message)
# this method is also exposed as a package function:
testRapi::demo_static(message)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message a message}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			void: 
		}
	}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
J = JavaApi$get()
J$FeatureTest$demoStatic('Ola, el mundo')
demo_static('Bonjour, le monde')
			}
			\if{html}{\out{</div>}}
		}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-FeatureTest-diamonds"></a>}}
	
	\subsection{Method \code{FeatureTest$diamonds()}}{
		The ggplot2::diamonds dataframe 

A copy serialised into java, using
RObject.writeRDS, saved within the jar file of the package, and exposed here
using RObject.readRDS.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$diamonds()
# this method is also exposed as a package function:
testRapi::diamonds()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RDataframe: the ggplot2::diamonds dataframe
		}
	}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
dplyr::glimpse( diamonds() )
			}
			\if{html}{\out{</div>}}
		}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-FeatureTest-collider"></a>}}
	
	\subsection{Method \code{FeatureTest$collider()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$FeatureTest$collider(message1, message2)
# this method is also exposed as a package function:
testRapi::feature_test_collider(message1, message2)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message1}{ - (java expects a RCharacter)}
				\item{message2}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-MinimalExample-new"></a>}}
	
	\subsection{Method \code{MinimalExample$new()}}{
		the default no-args constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$MinimalExample$new()
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{none}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 MinimalExample object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-MoreFeatureTest-new"></a>}}
	
	\subsection{Method \code{MoreFeatureTest$new()}}{
		the first constructor is used if there are none annotated
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$MoreFeatureTest$new(message1, message2)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message1 - the message to be printed}{ - (java expects a RCharacter)}
				\item{message2 - will be used for toString}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 MoreFeatureTest object: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-MoreFeatureTest-create"></a>}}
	
	\subsection{Method \code{MoreFeatureTest$create()}}{
		A static object constructor
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$MoreFeatureTest$create(message1, message2)
# this method is also exposed as a package function:
testRapi::create(message1, message2)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message1 - the message to be printed}{ - (java expects a RCharacter)}
				\item{message2 - will be used for toString}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 MoreFeatureTest object: A MoreFeatureTest R6 object
		}
	}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
J = JavaApi$get()
J$MoreFeatureTest$create('Hello,',' World')
			}
			\if{html}{\out{</div>}}
		}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-MoreFeatureTest-concat"></a>}}
	
	\subsection{Method \code{MoreFeatureTest$concat()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$MoreFeatureTest$concat(message1, message2)
# this method is also exposed as a package function:
testRapi::concat(message1, message2)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message1}{ - (java expects a RCharacter)}
				\item{message2}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: 
		}
	}


	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-MoreFeatureTest-collider"></a>}}
	
	\subsection{Method \code{MoreFeatureTest$collider()}}{
		no title
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = testRapi::JavaApi$get()
J$MoreFeatureTest$collider(message1, message2)
# this method is also exposed as a package function:
testRapi::more_feature_test_collider(message1, message2)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{message1}{ - (java expects a RCharacter)}
				\item{message2}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: 
		}
	}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
library(testthat)
tmp = more_feature_test_collider('should ','work')
expect_equal(tmp,'more feature test: should work')
			}
			\if{html}{\out{</div>}}
		}


}